
    public static HashMap<String, Integer> sortByValue(HashMap<String, Integer> hm)
    {
        // Create a list from elements of HashMap
        List<Map.Entry<String, Integer> > list =
                new LinkedList<Map.Entry<String, Integer> >(hm.entrySet());

        // Sort the list
        Collections.sort(list, new Comparator<Map.Entry<String, Integer> >() {
            public int compare(Map.Entry<String, Integer> o1,
                               Map.Entry<String, Integer> o2)
            {
                return (o1.getValue()).compareTo(o2.getValue());
            }
        });

        // put data from sorted list to hashmap
        HashMap<String, Integer> temp = new LinkedHashMap<String, Integer>();
        for (Map.Entry<String, Integer> aa : list) {
            temp.put(aa.getKey(), aa.getValue());
        }
        return temp;
    }


    static <K,V extends Comparable<? super V>>
        List<Map.Entry<K, V>> entriesSortedByValues(Map<K,V> map) {

            List<Map.Entry<K,V>> sortedEntries = new ArrayList<Map.Entry<K,V>>(map.entrySet());

            Collections.sort(sortedEntries,
                    new Comparator<Map.Entry<K,V>>() {
                        @Override
                        public int compare(Map.Entry<K,V> e1, Map.Entry<K,V> e2) {
                            return e2.getValue().compareTo(e1.getValue());
                        }
                    }
            );

            return sortedEntries;
        }


      ///kam no code



         HashMap<Integer, Integer> countrys = new HashMap<>();

                                //countrys.put(1, country);
                                countrys.put(2, totalConfirmed);
                                countrys.put(3, totalDeaths);
                                countrys.put(4, totalRecovered);

                                final LinkedHashMap<Integer, Integer> sortedMap = new LinkedHashMap<>();

                                countrys.entrySet()
                                        .stream()
                                        .filter(e -> !e.getKey().equals(1))
                                        .sorted(Map.Entry.comparingByValue())
                                        .forEachOrdered(new Consumer<Map.Entry<Integer, Integer>>() {
                                            @Override
                                            public void accept(Map.Entry<Integer, Integer> x) {
                                                sortedMap.put(x.getKey(), x.getValue());
                                            }
                                        });

                                System.out.println("sorted map is"+sortedMap);

                                /////////////////////

                                  countrys.entrySet()
                                                                .stream()
                                                                .sorted(Map.Entry.comparingByValue())
                                                                .forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));

                                                        System.out.println(sortedMap);